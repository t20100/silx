version: 0.16-dev{build}

# fetch repository as zip archive
shallow_clone: true

notifications:
- provider: Email
  to:
  - silx-ci@edna-site.org
  subject: '[CI] appveyor'
  on_build_success: false
  on_build_failure: false
  on_build_status_changed: true

image: Visual Studio 2015

cache:
    - '%LOCALAPPDATA%\pip\Cache'

environment:
    global:
        WIN_SDK_ROOT: "C:\\Program Files\\Microsoft SDKs\\Windows"
        VENV_BUILD_DIR: "venv_build"
        VENV_TEST_DIR: "venv_test"

    matrix:
        # Python 3.8
        - PYTHON_DIR: "C:\\Python38-x64"
          QT_BINDING: "PyQt5"
          WITH_GL_TEST: True
          PIP_OPTIONS: "-q --pre"

        # Python 3.6
        - PYTHON_DIR: "C:\\Python36-x64"
          QT_BINDING: "PySide2"
          WITH_GL_TEST: True
          PIP_OPTIONS: "-q"

branches:
    only:
        - master
        - /\d*\.\d*/

install:
    # Add Python to PATH
    - "SET PATH=%PYTHON_DIR%;%PYTHON_DIR%\\Scripts;%PATH%"

    # Upgrade/install distribution modules
    - "pip install %PIP_OPTIONS% --upgrade setuptools"
    - "python -m pip install %PIP_OPTIONS% --upgrade pip"

    # Download Mesa OpenGL in Python directory when testing OpenGL
    - IF %WITH_GL_TEST%==True curl -fsS -o %PYTHON_DIR%\\opengl32.dll http://www.silx.org/pub/silx/continuous_integration/opengl32_mingw-mesa-x86_64.dll

build_script:
    # Create build virtualenv
    - "python -m venv --clear %VENV_BUILD_DIR%"
    - "%VENV_BUILD_DIR%\\Scripts\\activate.bat"

    # Install build dependencies
    - "pip install %PIP_OPTIONS% --upgrade wheel"
    - "pip install %PIP_OPTIONS% --upgrade numpy"
    - "pip install %PIP_OPTIONS% --upgrade cython"

    # Print Python info
    - "python ci\\info_platform.py"
    - "pip list --format=columns"

    # Build
    - "python setup.py bdist_wheel"
    - ps: "ls dist"

    # Leave build virtualenv
    - "%VENV_BUILD_DIR%\\Scripts\\deactivate.bat"
    - "rmdir %VENV_BUILD_DIR% /s /q"

before_test:
    # Create test virtualenv
    - "python -m venv --clear %VENV_TEST_DIR%"
    - "%VENV_TEST_DIR%\\Scripts\\activate.bat"

    # First install any temporary pinned/additional requirements
    - pip install %PIP_OPTIONS% -r "ci\requirements-pinned.txt

    # Install dependencies
    - pip install %PIP_OPTIONS% -r requirements.txt

    # Install selected Qt binding
    - "pip install %PIP_OPTIONS% %QT_BINDING%"

    # Install pytest
    - "pip install %PIP_OPTIONS% pytest"
    - "pip install %PIP_OPTIONS% pytest-xvfb"

    # Install the generated wheel package to test it
    # Make sure silx does not come from cache or pypi
    # At this point all install_requires dependencies MUST be installed
    # as this is installing only from dist/
    - "pip install --pre --find-links dist/ --no-cache-dir --no-index silx"

    # Print Python info
    - "python ci\\info_platform.py"
    - "pip list --format=columns"

    # Try to close popups
    #- "pip install --upgrade pynput"
    #- "python ./ci/close_popup.py"

test_script:
    # Run tests with selected Qt binding and without OpenCL
    - echo "WITH_GL_TEST=%WITH_GL_TEST%"
    - "python run_tests.py --installed -v --no-opencl --qt-binding=%QT_BINDING%"

after_test:
    # Leave test virtualenv
    - "%VENV_TEST_DIR%\\Scripts\\deactivate.bat"
    - "rmdir %VENV_TEST_DIR% /s /q"

on_failure:
    # Push test-debug files as artefact
    - ps: >-
        if (Test-Path -LiteralPath "build\test-debug") {
            Get-ChildItem .\build\test-debug\* | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
        }

artifacts:
    # Archive the generated wheel package in the ci.appveyor.com build report.
    - path: dist\*
